package io.brutus.minecraft.serverclusters.uid;

import com.google.common.util.concurrent.ListenableFuture;

/**
 * Configuration and storage for generating unique server ids.
 */
public interface IdCounterConfiguration {

  /**
   * Gets the format for unique ids generated by this server, where <code>%cluster%</code> should be
   * replaced with the requesting server's cluster id, and <code>%counter%</code> should be replaced
   * with a number unique within the cluster.
   * 
   * @return The format of ids produced by this server.
   */
  String getIdFormat();

  /**
   * Makes thread-safe, asynchronous attempt to get a counter unique to the given cluster.
   * <p>
   * Each time this is called, it will get a new number that has not been used before for the given
   * cluster.
   * <p>
   * Counters should be stored persistently to avoid overlap in the case of crashes, restarts, etc.
   * 
   * @param clusterId The id of the cluster to get a unique number from.
   * @return The asynchronous, future result of this computation. Calls back with a number unique
   *         within this coordinator and the given cluster.
   */
  ListenableFuture<Long> getCounter(String clusterId);

}
