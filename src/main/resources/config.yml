#
# NOTE: All text strings are case-sensitive! Ids, channel names, etc. all must be in the correct case!
#

# ------------------------------
# Configuration for this server.
# ------------------------------
this-server:

    # This Minecraft server's id. This must be the same as BungeeCord knows it.
    server-id: 'server1'
    
    # The name of the cluster that this server is a part of. It is okay if this server is the only 
    # member of its cluster. However, you must select a cluster id no matter what, because cluster 
    # ids are what is used to relocate players on the network. Cluster ids are like a logical 
    # address on the network. You can be the only person living at an address or you can be
    # one of ten, but you need to have an address to get mail.
    cluster-id: 'cluster1'
    
    # The maximum number of players allowed on this server. Other servers will use this in order to 
    # decide when to send players here. This number can be dynamically overwritten via the 
    # ServerClusters API. ServerClusters will enforce this number, but it does not overwrite the 
    # Minecraft server's vanilla number of slots. The vanilla number of slots needs to be edited 
    # separately and should ALWAYS be higher than ServerCluster's max slots. 
    default-player-slots: 25
    
    # Whether to kick players who have not reserved a slot when they try to log in to this server, 
    # even if there are slots freely available. Players sent through the ServerClusters API will 
    # almost always have a reservation. Players sent via other means (ex: /server yourserver) will not.
    strict-reservations: false
    
    # Whether this server should try to periodically consolidate its players to other instances of
    # the same cluster. This can help matchmaking and make up for any weird behavior where players 
    # get stuck on an almost empty instance when they could theoretically be in a match.
    #
    # This ONLY works when this server's cluster is using matchmaking for server selection. Otherwise,
    # this setting is ignored.
    # 
    # How it works: This server will periodically look at its cluster, and see if there are any 
    # instances that have FEWER open slots than this server, but still enough for ALL of this 
    # server's players. If those requirements are met, this server will attempt to get a reservation
    # for all of its players on that instance, consolidating the two groups of players into one, 
    # bigger match.
    # For example, if server1 has 5/10 players and server2 has 3/10 players, server2 would send all
    # of its 3 players to server1 so they are not waiting around without enough players to start the
    # match. If server2 did not do this, then players just joining the cluster would go to server1
    # and get into a match faster than the players in server2, even though those in server2 have
    # been waiting longer.
    attempt-instance-consolidations: false
    
# -------------------------------------------------------
# Configuration for how to treat clusters on the network.
# -------------------------------------------------------
clusters:
    # How to treat clusters of connected servers when sending players to them.
    #
    # Currently supported:
    # 1. 'matchmaking' - puts the players in the server with the least number of open slots, but still 
    #     enough for the number of players being sent. This causes servers to fill up as fast as 
    #     possible, which is a way to accomplish efficient matchmaking.
    # 2. 'loadbalancing' - puts the players in the server with the most number of open slots. This 
    #     causes each server to be used roughly equally, spreading the load throughout the cluster. 
    # 3. 'random' - puts the players in any random server in the cluster that has enough slots. 
    #
    # Any cluster that is not configured will default to 'random' mode if players are sent to it from
    # this server.
    server-selection:
    
        # <cluster id>: '<selection mode>'
        cluster1: 'matchmaking'
        cluster2: 'loadbalancing'
        cluster3: 'random'

# -----------------------------------------
# Configuration for cross-server messaging.
# -----------------------------------------
# How connected servers interact with each other. (required for all ServerClusters functions)
# This plugin relies on the PubSub plugin library for messaging.
messaging:

    # The name of the pub/sub messaging instance to use. See the PubSub config for more.
    instance-name: 'pubsub1'
    
    # The channels on which to publish and subscribe to messages. Each channel should be unique 
    # within the messaging instance being used, and the channels should be used for NOTHING else. 
    # For example, every connected server should use the same heartbeat channel, but they should not 
    # use the same channel for both heartbeats and reservation responses. If two servers' channels are not the 
    # same, or if they overlap with another function's channel, this plugin will not work at all.
    # (Channel names will be encoded to UTF-8 bytes) Remember, they are case sensitive.
    channels:
        heartbeat: 'sc-hb'
        shutdown: 'sc-sh'
        reservation-requests: 'sc-req'
        reservation-responses: 'sc-resp'
        
        
# ------------------------------------------------
# Configuration for various advanced time options.
# ------------------------------------------------
# ADVANCED! Do not edit these unless you know what you are doing!
# The default settings are generally reasonable.
timings: 

    # Servers' heart rates (how often heartbeats are sent) are not constant. They will increase when the 
    # locally-set number of open slots changes. When changes are happening, more heartbeats are sent to 
    # reduce the chance of connected servers having outdated information. The more changes there are, 
    # the faster the heart rate will be. However, even when there is no change, the server will still 
    # send heartbeats periodically to let other servers know it is still responsive and available.
    heart-rate:
    
        # The MAXIMUM amount of time, in millseconds, between outgoing heartbeats. In order to let other 
        # servers know this server is okay, heartbeat messages need to be sent even if no change has 
        # taken place on this server. This is the amount of time in between outgoing heartbeats when 
        # the number of open slots is not changing.
        min-rate: 5000
        
        # The MINIMUM amount of time, in milliseconds, between outgoing heartbeats. Heartbeat messages 
        # will not be sent more often than every <this number> of milliseconds. A lower number means 
        # heartbeat messages are sent more often when players log into/out of this server. This means 
        # connected server's data about this server is more updated more often and is more accurate, 
        # but a lower number also will increase traffic and possibly strain this server and the
        # network's communications.
        max-rate: 500
    
    # The amount of time, in milliseconds, to wait in between incoming heartbeats from a connected 
    # server before assuming that it is offline/unresponsive. This should obviously be more than other 
    # servers' minimum heart rate, or else this server will think other servers are unresponsive for 
    # no reason. Something like 2-4x their minimum heart rate makes sense, which allows one or two 
    # messages to be missed somehow before the connected server is considered unresponsive.
    server-timeout: 15000
    
    # How long, in milliseconds, after sending a reservation-request should the requesting server 
    # give up? This applies both to requests sent to a specific server, and those sent looking for
    # the server of a given player.
    response-timeout: 2000

    # After granting players a reservation, how long should this server wait (in milliseconds) before
    # revoking that reservation and reopening the reserved slot for other players?
    reservation-timeout: 5000
